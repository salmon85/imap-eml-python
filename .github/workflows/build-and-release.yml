name: Build and Release imapclone

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: Build for Windows, Linux, macOS
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          pip install pyinstaller tqdm
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y fuse libfuse2
            wget https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-x86_64.AppImage
            chmod +x appimagetool-x86_64.AppImage
          fi
        shell: bash

      - name: Build binary
        run: |
          export ARCHFLAGS="-arch x86_64"
          pyinstaller --onefile --windowed --name imapclone imapclone.py --target-architecture x86_64

          mkdir -p output

          if [ "$RUNNER_OS" == "Linux" ]; then
            mkdir -p AppDir/usr/bin
            cp dist/imapclone AppDir/usr/bin/
            cp icon.png AppDir/icon.png
            echo "[Desktop Entry]" > AppDir/imapclone.desktop
            echo "Name=IMAP Cloner" >> AppDir/imapclone.desktop
            echo "Exec=imapclone" >> AppDir/imapclone.desktop
            echo "Icon=icon" >> AppDir/imapclone.desktop
            echo "Type=Application" >> AppDir/imapclone.desktop
            echo "Categories=Utility;" >> AppDir/imapclone.desktop
            ln -s usr/bin/imapclone AppDir/AppRun
            ./appimagetool-x86_64.AppImage AppDir output/imapclone-x86_64.AppImage
            chmod +x output/imapclone-x86_64.AppImage
          elif [ "$RUNNER_OS" == "Windows" ]; then
            cp dist/imapclone.exe output/
          elif [ "$RUNNER_OS" == "macOS" ]; then
            cp dist/imapclone output/
          fi
        shell: bash

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}
          path: output/*
          if-no-files-found: error

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Zip release binaries
        run: |
          cd release-artifacts
          for dir in build-*; do
            cd "$dir"
            zip -9 -r "../${dir}.zip" *
            cd ..
          done

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GH_RELEASE_TOKEN }}
          files: release-artifacts/*.zip
          generate_release_notes: true
